type User {
  id: ID!
  name : String!
  email : String!
  createdAt: String!
  updatedAt: String!
}

type Post {
  id: ID!
  title: String!
  description: String!
  createdBy: User!
  createdAt: String!
  tags: [String!]!
}

type Comment {
  id: ID!
  content: String!
  createdBy: User!
  createdAt: String!
  post: Post!
}

input PaginationInput {
  limit: Int!
  offset: Int!
}

enum FilterPostsField{
  CREATED_BY
  TITLE
  TAGS
}

input FilterPostInput {
  field: FilterPostsField!
  value: String!
}

enum FilterCommentsField{
  CREATED_BY
  POST_ID
  CREATED_AT
}

input FilterCommentsInput{
  field: FilterCommentsField!
  value: String!
}

enum SortPostsField{
  CREATED_AT
  TITLE
}

input SortPostsInput {
  field: SortPostsField!
  isAsc: Boolean
}

enum SortCommentsField{
  CREATED_AT
}

input SortCommentsInput{
  field: SortCommentsField!
  isAsc: Boolean
}

type Query {
  getUser(id: ID!): User!
  getPost(id: ID!): Post!
  getComment(id: ID!): Comment!
  listPosts(paginationInput: PaginationInput, filterPostsInput: FilterPostInput, sortPostsInput: SortPostsInput): [Post!]!
  listComments(paginationInput: PaginationInput, filterCommentsInput: FilterCommentsInput, sortCommentsInput: SortCommentsInput): [Comment!]!
}

input CreateUserInput {
  name: String!
  email: String!
}

input UpdateUserInput {
  name: String!
  email: String!
}

input CreatePostInput {
  title: String!
  description: String!
  tags: [String!]!
  createdBy: ID!
}

input UpdatePostInput {
  title: String!
  description: String!
  tags: [String!]!
}

input CreateCommentInput {
  content: String!
  createdBy: ID!
  postId: ID!
}

input UpdateCommentInput {
  content: String!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!

  createPost(input: CreatePostInput!): Post!
  updatePost(id: ID!, input: UpdatePostInput!): Post!
  deletePost(id: ID!): Boolean!

  createComment(input: CreateCommentInput! ): Comment!
  updateComment(id: ID!, input: UpdateCommentInput!): Comment!
  deleteComment(id: ID!): Boolean!
}