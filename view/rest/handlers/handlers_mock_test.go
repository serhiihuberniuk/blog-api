// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package handlers_test is a generated GoMock package.
package handlers_test

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/serhiihuberniuk/blog-api/models"
)

// Mockservice is a mock of service interface.
type Mockservice struct {
	ctrl     *gomock.Controller
	recorder *MockserviceMockRecorder
}

// MockserviceMockRecorder is the mock recorder for Mockservice.
type MockserviceMockRecorder struct {
	mock *Mockservice
}

// NewMockservice creates a new mock instance.
func NewMockservice(ctrl *gomock.Controller) *Mockservice {
	mock := &Mockservice{ctrl: ctrl}
	mock.recorder = &MockserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockservice) EXPECT() *MockserviceMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *Mockservice) CreateComment(ctx context.Context, payload models.CreateCommentPayload) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockserviceMockRecorder) CreateComment(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*Mockservice)(nil).CreateComment), ctx, payload)
}

// CreatePost mocks base method.
func (m *Mockservice) CreatePost(ctx context.Context, payload models.CreatePostPayload) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockserviceMockRecorder) CreatePost(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*Mockservice)(nil).CreatePost), ctx, payload)
}

// CreateUser mocks base method.
func (m *Mockservice) CreateUser(ctx context.Context, payload models.CreateUserPayload) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockserviceMockRecorder) CreateUser(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*Mockservice)(nil).CreateUser), ctx, payload)
}

// DeleteComment mocks base method.
func (m *Mockservice) DeleteComment(ctx context.Context, commentId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, commentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockserviceMockRecorder) DeleteComment(ctx, commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*Mockservice)(nil).DeleteComment), ctx, commentId)
}

// DeletePost mocks base method.
func (m *Mockservice) DeletePost(ctx context.Context, postID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockserviceMockRecorder) DeletePost(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*Mockservice)(nil).DeletePost), ctx, postID)
}

// DeleteUser mocks base method.
func (m *Mockservice) DeleteUser(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockserviceMockRecorder) DeleteUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*Mockservice)(nil).DeleteUser), ctx)
}

// GetComment mocks base method.
func (m *Mockservice) GetComment(ctx context.Context, commentID string) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", ctx, commentID)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockserviceMockRecorder) GetComment(ctx, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*Mockservice)(nil).GetComment), ctx, commentID)
}

// GetPost mocks base method.
func (m *Mockservice) GetPost(ctx context.Context, postID string) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, postID)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockserviceMockRecorder) GetPost(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*Mockservice)(nil).GetPost), ctx, postID)
}

// GetUser mocks base method.
func (m *Mockservice) GetUser(ctx context.Context, userID string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockserviceMockRecorder) GetUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*Mockservice)(nil).GetUser), ctx, userID)
}

// ListComments mocks base method.
func (m *Mockservice) ListComments(ctx context.Context, pagination models.Pagination, filter models.FilterComments, sort models.SortComments) ([]*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", ctx, pagination, filter, sort)
	ret0, _ := ret[0].([]*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComments indicates an expected call of ListComments.
func (mr *MockserviceMockRecorder) ListComments(ctx, pagination, filter, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*Mockservice)(nil).ListComments), ctx, pagination, filter, sort)
}

// ListPosts mocks base method.
func (m *Mockservice) ListPosts(ctx context.Context, pagination models.Pagination, filter models.FilterPosts, sort models.SortPosts) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPosts", ctx, pagination, filter, sort)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts.
func (mr *MockserviceMockRecorder) ListPosts(ctx, pagination, filter, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*Mockservice)(nil).ListPosts), ctx, pagination, filter, sort)
}

// Login mocks base method.
func (m *Mockservice) Login(ctx context.Context, payload models.LoginPayload) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockserviceMockRecorder) Login(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*Mockservice)(nil).Login), ctx, payload)
}

// ParseToken mocks base method.
func (m *Mockservice) ParseToken(tokenString string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", tokenString)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockserviceMockRecorder) ParseToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*Mockservice)(nil).ParseToken), tokenString)
}

// UpdateComment mocks base method.
func (m *Mockservice) UpdateComment(ctx context.Context, payload models.UpdateCommentPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockserviceMockRecorder) UpdateComment(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*Mockservice)(nil).UpdateComment), ctx, payload)
}

// UpdatePost mocks base method.
func (m *Mockservice) UpdatePost(ctx context.Context, payload models.UpdatePostPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockserviceMockRecorder) UpdatePost(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*Mockservice)(nil).UpdatePost), ctx, payload)
}

// UpdateUser mocks base method.
func (m *Mockservice) UpdateUser(ctx context.Context, payload models.UpdateUserPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockserviceMockRecorder) UpdateUser(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*Mockservice)(nil).UpdateUser), ctx, payload)
}

// MockauthMiddleware is a mock of authMiddleware interface.
type MockauthMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockauthMiddlewareMockRecorder
}

// MockauthMiddlewareMockRecorder is the mock recorder for MockauthMiddleware.
type MockauthMiddlewareMockRecorder struct {
	mock *MockauthMiddleware
}

// NewMockauthMiddleware creates a new mock instance.
func NewMockauthMiddleware(ctrl *gomock.Controller) *MockauthMiddleware {
	mock := &MockauthMiddleware{ctrl: ctrl}
	mock.recorder = &MockauthMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthMiddleware) EXPECT() *MockauthMiddlewareMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockauthMiddleware) Auth(next http.HandlerFunc) http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", next)
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockauthMiddlewareMockRecorder) Auth(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockauthMiddleware)(nil).Auth), next)
}

// MockcurrentUserInformationProvider is a mock of currentUserInformationProvider interface.
type MockcurrentUserInformationProvider struct {
	ctrl     *gomock.Controller
	recorder *MockcurrentUserInformationProviderMockRecorder
}

// MockcurrentUserInformationProviderMockRecorder is the mock recorder for MockcurrentUserInformationProvider.
type MockcurrentUserInformationProviderMockRecorder struct {
	mock *MockcurrentUserInformationProvider
}

// NewMockcurrentUserInformationProvider creates a new mock instance.
func NewMockcurrentUserInformationProvider(ctrl *gomock.Controller) *MockcurrentUserInformationProvider {
	mock := &MockcurrentUserInformationProvider{ctrl: ctrl}
	mock.recorder = &MockcurrentUserInformationProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcurrentUserInformationProvider) EXPECT() *MockcurrentUserInformationProviderMockRecorder {
	return m.recorder
}

// GetCurrentUserID mocks base method.
func (m *MockcurrentUserInformationProvider) GetCurrentUserID(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUserID", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentUserID indicates an expected call of GetCurrentUserID.
func (mr *MockcurrentUserInformationProviderMockRecorder) GetCurrentUserID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUserID", reflect.TypeOf((*MockcurrentUserInformationProvider)(nil).GetCurrentUserID), ctx)
}
