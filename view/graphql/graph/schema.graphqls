directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
  | FIELD_DEFINITION

directive @isAuthenticated on FIELD_DEFINITION

type User {
  id: ID!
  name : String!
  email : String!
  createdAt: String!
  updatedAt: String!
  password: String!
}

type Post {
  id: ID!
  title: String!
  description: String!
  createdBy: User! @goField(forceResolver: true)
  authorID: ID!
  createdAt: String!
  tags: [String!]!
}

type Comment {
  id: ID!
  content: String!
  createdBy: User! @goField(forceResolver: true)
  authorID: ID!
  createdAt: String!
  post: Post! @goField(forceResolver: true)
  postID: ID!
}

input PaginationInput {
  limit: Int!
  offset: Int!
}

enum FilterPostsField{
  CREATED_BY
  TITLE
  TAGS
}

input FilterPostInput {
  field: FilterPostsField!
  value: String!
}

enum FilterCommentsField{
  CREATED_BY
  POST_ID
  CREATED_AT
}

input FilterCommentsInput{
  field: FilterCommentsField!
  value: String!
}

enum SortPostsField{
  CREATED_AT
  TITLE
}

input SortPostsInput {
  field: SortPostsField!
  isAsc: Boolean!
}

enum SortCommentsField{
  CREATED_AT
}

input SortCommentsInput{
  field: SortCommentsField!
  isAsc: Boolean!
}

type Query {
  getUser(id: ID!): User! @isAuthenticated
  getPost(id: ID!): Post!@isAuthenticated
  getComment(id: ID!): Comment! @isAuthenticated
  listPosts(paginationInput: PaginationInput, filterPostsInput: FilterPostInput, sortPostsInput: SortPostsInput): [Post!]! @isAuthenticated
  listComments(paginationInput: PaginationInput, filterCommentsInput: FilterCommentsInput, sortCommentsInput: SortCommentsInput): [Comment!]! @isAuthenticated
}

input LoginInput {
  email: String!
  password: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String!
  email: String!
  password: String!
}

input CreatePostInput {
  title: String!
  description: String!
  tags: [String!]!
}

input UpdatePostInput {
  title: String!
  description: String!
  tags: [String!]!
}

input CreateCommentInput {
  content: String!
  postId: ID!
}

input UpdateCommentInput {
  content: String!
}

type Mutation {
  login (loginInput: LoginInput!): String!

  createUser(input: CreateUserInput!): User!
  updateUser(input: UpdateUserInput!): User! @isAuthenticated
  deleteUser: Boolean! @isAuthenticated

  createPost(input: CreatePostInput!): Post! @isAuthenticated
  updatePost(id: ID!, input: UpdatePostInput!): Post! @isAuthenticated
  deletePost(id: ID!): Boolean! @isAuthenticated

  createComment(input: CreateCommentInput! ): Comment! @isAuthenticated
  updateComment(id: ID!, input: UpdateCommentInput!): Comment! @isAuthenticated
  deleteComment(id: ID!): Boolean! @isAuthenticated
}


